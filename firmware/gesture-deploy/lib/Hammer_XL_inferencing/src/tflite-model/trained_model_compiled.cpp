/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 02.05.2022 21:50:39

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 416;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const ALIGN(8) float tensor_data1[3] = { 0.022799596190452576, 0.18523846566677094, -0.2418111115694046, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3 } };
const ALIGN(16) float tensor_data2[10] = { -0.019604353234171867, 0, 0, -0.054178230464458466, 0, -0.27690038084983826, 0.090496383607387543, 0.46946984529495239, 0.075231939554214478, 0.054273813962936401, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const ALIGN(16) float tensor_data3[20] = { -0.16329044103622437, 0, 0, -0.18745999038219452, -0.0085961939767003059, -0.048558685928583145, -0.085237912833690643, 0, -0.00400887755677104, -0.012334325350821018, 0.32520842552185059, 0.26809743046760559, 0.12587463855743408, -0.0074817040003836155, 0, -0.24887952208518982, 0, 0.055501267313957214, 0, 0.0052249855361878872, };
const TfArray<1, int> tensor_dimension3 = { 1, { 20 } };
const ALIGN(16) float tensor_data4[20*33] = { 
  -0.20338277518749237, -0.39924994111061096, -0.18346427381038666, 0.040320843458175659, -0.054945021867752075, 0.028506726026535034, -0.28172516822814941, -0.24265500903129578, -0.2660541832447052, 0.049587041139602661, 0.30065765976905823, -0.11998453736305237, -0.34279143810272217, 0.31783393025398254, 0.13684064149856567, 0.32521608471870422, 0.30233070254325867, -0.10686773061752319, 0.22656747698783875, -0.21347129344940186, 0.28668591380119324, -0.30074477195739746, 0.35769489407539368, -0.41987177729606628, -0.19203102588653564, -0.19396489858627319, -0.3025708794593811, 0.13547980785369873, -0.12906226515769958, -0.11683471500873566, -0.21019153296947479, -0.29461908340454102, 0.063727647066116333, 
  0.045660138130187988, 0.075238525867462158, 0.0042297840118408203, -0.12647503614425659, 0.069052278995513916, 0.31281617283821106, 0.21186313033103943, 0.27284219861030579, -0.26821571588516235, 0.21863004565238953, 0.17624744772911072, -0.15697033703327179, -0.069299280643463135, -0.28135687112808228, -0.18814371526241302, -0.13312488794326782, -0.12397260963916779, -0.27692908048629761, 0.23038122057914734, 0.15014705061912537, -0.023042052984237671, -0.18011578917503357, -0.26370850205421448, -0.18658939003944397, 0.1063544750213623, -0.1872798353433609, 0.083405077457427979, 0.15811112523078918, -0.17618873715400696, 0.018285304307937622, 0.26622304320335388, 0.30450168251991272, -0.31975334882736206, 
  -0.002468496561050415, -0.32716944813728333, -0.26201251149177551, 0.13980168104171753, -0.00048547983169555664, 0.074818283319473267, -0.31742408871650696, -0.07890358567237854, -0.20832876861095428, 0.033286362886428833, -0.1116330623626709, -0.081161588430404663, -0.24514910578727722, -0.072680264711380005, 0.17608663439750671, -0.2785106897354126, -0.22762250900268555, -0.07836836576461792, 0.27623525261878967, -0.31957444548606873, 0.22404631972312927, -0.046642839908599854, -0.16681282222270966, 0.065580964088439941, -0.14861768484115601, 0.27806797623634338, 0.034443020820617676, -0.17104701697826385, -0.053372174501419067, -0.19977740943431854, -0.21737523376941681, 0.24851813912391663, -0.29024112224578857, 
  -0.37641599774360657, -0.1917107105255127, -0.27976876497268677, 0.13850566744804382, 0.088021785020828247, 0.097020357847213745, -0.23145633935928345, 0.051169693470001221, 0.050808042287826538, 0.28527763485908508, 0.0018286705017089844, -0.33891767263412476, -0.083514302968978882, 0.10861774533987045, 0.027956128120422363, -0.16362747550010681, -0.089178130030632019, -0.070986926555633545, 0.31376758217811584, 0.1950506865978241, -0.33222669363021851, -0.20945833623409271, 0.28360161185264587, -0.18372336030006409, -0.066563807427883148, 0.30550852417945862, 0.021623551845550537, -0.10886599123477936, 0.25321915745735168, 0.061264455318450928, -0.0001125335693359375, 0.24523910880088806, 0.022217094898223877, 
  -0.0054702390916645527, 0.18034075200557709, -0.20529267191886902, 0.20856395363807678, 0.10571593046188354, 0.29674479365348816, -0.25434982776641846, -0.12980036437511444, 0.062867790460586548, 0.10205009579658508, 0.1097361147403717, 0.0028551963623613119, -0.02182433009147644, -0.069162666797637939, -0.28346383571624756, -0.014005362987518311, -0.16308616101741791, -0.14713795483112335, 0.075863122940063477, 0.061190962791442871, 0.053647726774215698, -0.13522887229919434, -0.13559699058532715, 0.074913978576660156, -0.036309659481048584, -0.15145190060138702, 0.2883705198764801, 0.13500377535820007, 0.30436787009239197, -0.003009408712387085, 0.021010518074035645, -0.17658060789108276, -0.1659124344587326, 
  0.11744872480630875, -0.18922485411167145, -0.062589108943939209, -0.055013865232467651, -0.0070137977600097656, 0.12428200244903564, 0.08096882700920105, 0.11178964376449585, -0.0064406991004943848, -0.27746176719665527, -0.16343583166599274, -0.2544751763343811, 0.2642039954662323, -0.19640938937664032, 0.24443128705024719, 0.060933709144592285, -0.17072181403636932, 0.1186593770980835, 0.22444388270378113, 0.28147295117378235, -0.16273464262485504, -0.31024473905563354, -0.11437775194644928, -0.10738296806812286, -0.22546003758907318, 0.15260770916938782, 0.056324869394302368, -0.13221615552902222, 0.18169859051704407, 0.10951632261276245, 0.15195855498313904, 0.31524166464805603, 0.015500724315643311, 
  -0.31950750946998596, 0.27081736922264099, -0.076949998736381531, -0.12052839994430542, -0.12850876152515411, 0.09815022349357605, 0.097490906715393066, -0.07543867826461792, -0.15537966787815094, 0.17858502268791199, -0.27601554989814758, -0.32186299562454224, -0.4404640793800354, -0.28752100467681885, 0.28846493363380432, 0.079648256301879883, -0.069264769554138184, 0.15783059597015381, 0.089851409196853638, -0.1177414208650589, 0.062431633472442627, -0.040877163410186768, 0.23542773723602295, -0.27857637405395508, 0.05980350449681282, 0.0064237713813781738, -0.16330716013908386, 0.05509069561958313, 0.083385676145553589, -0.091368108987808228, 0.14707258343696594, -0.097069680690765381, -0.20855794847011566, 
  -0.11061909794807434, 0.32367536425590515, -0.22446572780609131, -0.077373087406158447, -0.27365455031394958, 0.3066079318523407, 0.048475772142410278, -0.30905058979988098, 0.26549717783927917, -0.25921630859375, 0.2093949019908905, -0.17951487004756927, -0.23982013761997223, -0.14562815427780151, -0.18434189260005951, -0.034447759389877319, -0.0062663257122039795, -0.26253122091293335, 0.019424885511398315, -0.093843594193458557, -0.10313120484352112, -0.26380893588066101, -0.31980669498443604, -0.065942674875259399, -0.052843064069747925, -0.28885704278945923, 0.23124811053276062, 0.1017414927482605, 0.12115040421485901, 0.23151704668998718, -0.29385244846343994, 0.27848431468009949, -0.29307007789611816, 
  0.12998785078525543, 0.10570785403251648, 0.13528101146221161, -0.31861084699630737, 0.20674428343772888, 0.15336698293685913, -0.10674835741519928, -0.066160380840301514, 0.13856703042984009, -0.2619975209236145, -0.32925707101821899, 0.34230110049247742, -0.086771555244922638, -0.11413557082414627, -0.33529707789421082, -0.20544993877410889, 0.058203458786010742, -0.057480603456497192, 0.23968318104743958, -0.0024565458297729492, -0.040654867887496948, -0.093842878937721252, -0.024161772802472115, -0.22155390679836273, -0.12733413279056549, 0.29462268948554993, -0.28548479080200195, 0.075797975063323975, 0.26340386271476746, -0.0051628351211547852, -0.11696210503578186, 0.12303027510643005, -0.14488452672958374, 
  -0.029200188815593719, 0.064163327217102051, 0.030591875314712524, 0.16323769092559814, -0.28949221968650818, -0.015403836965560913, -0.026431560516357422, -0.12624906003475189, 0.1674787700176239, -0.059238910675048828, 0.010666579008102417, -0.12013362348079681, -0.15941709280014038, -0.014264792203903198, 0.026215285062789917, -0.14099317789077759, 0.088484466075897217, 0.29455140233039856, 0.27086570858955383, -0.26879048347473145, 0.20988383889198303, -0.21079631149768829, -0.037700764834880829, 0.26579099893569946, 0.24117127060890198, -0.24675852060317993, -0.11352117359638214, -0.20897854864597321, 0.28936675190925598, 0.18952301144599915, -0.25864177942276001, 0.10064730048179626, -0.01079404354095459, 
  -0.24598433077335358, -0.078165650367736816, -0.30580142140388489, -0.24971452355384827, 0.31315156817436218, -0.11255790293216705, 0.10708120465278625, -0.010768383741378784, 0.046077132225036621, 0.22450593113899231, 0.024968355894088745, 0.30556455254554749, 0.19221152365207672, 0.29365181922912598, -0.038730591535568237, -0.24402715265750885, -0.20922794938087463, 0.20300725102424622, -0.10325177013874054, -0.03519788384437561, -0.18036848306655884, 0.017584830522537231, 0.19310933351516724, -0.071887172758579254, -0.1018134206533432, 0.10599848628044128, -0.24082985520362854, 0.18618366122245789, 0.115793377161026, -0.27562448382377625, 0.3180946409702301, -0.058254629373550415, -0.30909937620162964, 
  0.27681532502174377, 0.29276865720748901, -0.02605837769806385, -0.059160381555557251, 0.034885913133621216, 0.32675501704216003, 0.08477666974067688, 0.23238977789878845, 0.2562425434589386, 0.31129840016365051, -0.072090566158294678, 0.26078149676322937, 0.10039977729320526, -0.22843803465366364, -0.20005369186401367, 0.14562928676605225, 0.046249687671661377, 0.19273987412452698, 0.25606814026832581, 0.24288955330848694, 0.16604021191596985, -0.12924636900424957, 0.014209448359906673, 0.27588272094726562, 0.252920001745224, -0.23160474002361298, -0.069672852754592896, 0.26508739590644836, -0.20932532846927643, 0.20253083109855652, -0.29090052843093872, 0.13175225257873535, -0.21914944052696228, 
  0.10003824532032013, 0.33256256580352783, 0.051901251077651978, -0.18903270363807678, 0.25635132193565369, -0.10693053901195526, 0.088716953992843628, -0.14490216970443726, -0.047533094882965088, 0.30785903334617615, -0.023617297410964966, -0.19020320475101471, -0.097474254667758942, 0.26371949911117554, 0.29256507754325867, -0.32044756412506104, 0.16894546151161194, -0.019777625799179077, -0.31777080893516541, -0.070912331342697144, -0.30947455763816833, -0.066755443811416626, 0.26971349120140076, 0.16045081615447998, -0.27285829186439514, -0.038115799427032471, -0.24520355463027954, 0.10027843713760376, 0.26011547446250916, -0.13972514867782593, 0.22086045145988464, -0.11084450781345367, -0.10629858076572418, 
  0.010786120779812336, 0.090522527694702148, -0.11153723299503326, 0.22282430529594421, 0.043194383382797241, -0.081083536148071289, 0.16322678327560425, -0.065433204174041748, 0.1014881432056427, 0.24890598654747009, 0.32193174958229065, 0.26450875401496887, 0.21625286340713501, -0.15227079391479492, 0.01435360312461853, 0.070773303508758545, -0.19546827673912048, -0.17336302995681763, 0.090664267539978027, 0.26939919590950012, -0.32354626059532166, -0.12270177900791168, 0.11428822576999664, -0.1137719452381134, -0.34123149514198303, 0.26533272862434387, 0.18368062376976013, 0.058373928070068359, 0.28883764147758484, -0.14747343957424164, -0.3285793662071228, 0.33635947108268738, 0.09670943021774292, 
  -0.19680649042129517, -0.33098787069320679, 0.3306637704372406, -0.15824228525161743, 0.15767931938171387, -0.11396527290344238, 0.16938254237174988, 0.20572462677955627, 0.031939089298248291, -0.12259499728679657, -0.28082776069641113, -0.057134300470352173, -0.27306309342384338, -0.089024990797042847, 0.033051162958145142, -0.051926702260971069, -0.1800038069486618, -0.15140512585639954, -0.14156842231750488, -0.19409814476966858, 0.071696370840072632, 0.13825023174285889, -0.19152583181858063, 0.1207716166973114, 0.19018390774726868, 0.013070583343505859, -0.24652156233787537, -0.046171396970748901, -0.1387844979763031, 0.020872116088867188, 0.051945865154266357, -0.0090240836143493652, 0.23782595992088318, 
  -0.18121148645877838, 0.13744091987609863, -0.096583731472492218, 0.11397442221641541, -0.081552028656005859, 0.28939869999885559, -0.20063792169094086, -0.1645902693271637, -0.04606357216835022, 0.26788589358329773, -0.19545504450798035, 0.17758992314338684, -0.26857531070709229, -0.080716982483863831, 0.32833781838417053, -0.25295728445053101, -0.026951611042022705, 0.22692170739173889, 0.20569190382957458, 0.22894236445426941, 0.078262567520141602, -0.14691102504730225, 0.10729296505451202, -0.3554796576499939, -0.13968171179294586, -0.097643092274665833, 0.20103141665458679, 0.12072926759719849, 0.03061985969543457, 0.030603110790252686, -0.3073737621307373, -0.27137264609336853, -0.29203027486801147, 
  -0.2497522234916687, 0.28503361344337463, 0.19844159483909607, 0.056455165147781372, -0.013798713684082031, -0.0019522905349731445, -0.03638160228729248, -0.15881600975990295, -0.040273517370223999, 0.10306397080421448, 0.01228642463684082, -0.26950192451477051, -0.18908052146434784, -0.29810059070587158, -0.2153872549533844, 0.15816029906272888, 0.23128965497016907, 0.16089576482772827, -0.27817505598068237, -0.039976298809051514, -0.15688802301883698, -0.30027350783348083, -0.15071564912796021, 0.25041446089744568, 0.20675906538963318, 0.12699773907661438, -0.071415930986404419, 0.038974612951278687, 0.33037009835243225, 0.3098846971988678, 0.023850500583648682, -0.060399919748306274, -0.03051486611366272, 
  -0.18035994470119476, 0.12018786370754242, -0.33664679527282715, -0.28495588898658752, 0.29425856471061707, -0.13969939947128296, 0.055467337369918823, 0.23674061894416809, -0.19137895107269287, 0.026494532823562622, 0.029433578252792358, 0.11383791267871857, 0.10642867535352707, -0.11981347948312759, -0.05303606390953064, -0.096869304776191711, 0.01460421085357666, -0.053309202194213867, -0.17544406652450562, 0.26487746834754944, -0.30317020416259766, -0.093476429581642151, 0.13402357697486877, -0.1909860372543335, 0.27757498621940613, -0.040078818798065186, -0.2349204421043396, 0.32316491007804871, 0.19561180472373962, 0.17338290810585022, 0.19625911116600037, 0.059295386075973511, 0.059721112251281738, 
  -0.22423765063285828, -0.070374935865402222, 0.26764568686485291, 0.29055735468864441, 0.20043650269508362, 0.12616041302680969, -0.0074443221092224121, -0.22608831524848938, -0.090168356895446777, -0.083280265331268311, -0.2824748158454895, -0.22415575385093689, 0.24658378958702087, -0.033429950475692749, -0.14509165287017822, 0.2316417396068573, -0.13163585960865021, -0.054911911487579346, -0.27671027183532715, -0.056173413991928101, 0.20891782641410828, -0.28878635168075562, -0.099997445940971375, 0.32656058669090271, -0.21258053183555603, -0.27920243144035339, 0.24970319867134094, -0.089634895324707031, 0.064282685518264771, -0.020534813404083252, 0.1853238046169281, 0.12694576382637024, 0.2716195285320282, 
  -0.12150811403989792, 0.19300882518291473, 0.21409289538860321, 0.1573619544506073, 0.069196760654449463, -0.010352909564971924, 0.0042296350002288818, -0.2854498028755188, 0.29453638195991516, 0.30150589346885681, -0.079767942428588867, 0.22867307066917419, 0.03294689953327179, -0.11224013566970825, 0.27663519978523254, 0.10880565643310547, 0.076650708913803101, -0.30972081422805786, 0.094955027103424072, -0.047840744256973267, -0.10153724253177643, 0.18790027499198914, 0.25419908761978149, -0.25806790590286255, 0.21002647280693054, 0.31076624989509583, -0.0063852667808532715, 0.30883517861366272, -0.29498898983001709, -0.32846915721893311, -0.31533285975456238, -0.23680943250656128, 0.33614537119865417, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,33 } };
const ALIGN(16) float tensor_data5[10*20] = { 
  -0.298968106508255, -0.014016687870025635, 0.12290698289871216, 0.04961526021361351, 0.3609311580657959, -0.24099123477935791, -0.14104610681533813, 0.075009346008300781, -0.38952666521072388, -0.38274466991424561, -0.16200460493564606, -0.26540496945381165, 0.36202871799468994, 0.32458147406578064, -0.12032896280288696, -0.020795099437236786, -0.37547299265861511, 0.035352412611246109, -0.12740728259086609, 0.028594143688678741, 
  -0.28059786558151245, 0.062615931034088135, -0.2165655642747879, 0.1667969822883606, 0.10580015182495117, 0.03812822699546814, 0.3000338077545166, -0.18902638554573059, -0.15555453300476074, -0.3112604022026062, 0.068653404712677002, -0.33239167928695679, -0.1014312207698822, -0.13121494650840759, -0.33105406165122986, -0.3712192177772522, -0.17653581500053406, 0.2822265625, 0.20760005712509155, -0.36843103170394897, 
  -0.33629399538040161, 0.2969282865524292, 0.10381579399108887, -0.21731001138687134, 0.27437764406204224, -0.0071354806423187256, 0.18008947372436523, -0.18976423144340515, 0.340312659740448, 0.32559269666671753, -0.25146210193634033, -0.19464004039764404, 0.13676106929779053, -0.40740209817886353, 0.1347496509552002, -0.13986620306968689, -0.098049968481063843, 0.42122942209243774, -0.38097769021987915, -0.12437179684638977, 
  -0.5415266752243042, -0.078742712736129761, -0.26081410050392151, -0.42558673024177551, -0.054614957422018051, 0.16386057436466217, 0.20507189631462097, 0.32460159063339233, 0.40257641673088074, -0.32000121474266052, 0.3560822606086731, 0.19144603610038757, -0.3036206066608429, -0.25176748633384705, -0.10104566812515259, 0.44800713658332825, 0.092368841171264648, 0.14459075033664703, 0.1122550368309021, -0.26339280605316162, 
  0.064222872257232666, 0.02722698450088501, -0.23178304731845856, -0.32580304145812988, -0.42718395590782166, 0.3694617748260498, -0.15084272623062134, -0.025713235139846802, -0.25466746091842651, 0.42222774028778076, 0.021470248699188232, -0.42019453644752502, -0.37079283595085144, 0.15604168176651001, -0.067081749439239502, 0.081021785736083984, 0.079031646251678467, -0.38482159376144409, 0.41780859231948853, 0.10166460275650024, 
  0.33168894052505493, 0.34905964136123657, -0.34178513288497925, 0.10550565272569656, -0.30289804935455322, -0.11913770437240601, 0.078855574131011963, -0.09672313928604126, 0.41032561659812927, -0.41105499863624573, -0.37362945079803467, 0.46348994970321655, -0.26295176148414612, 0.26392671465873718, -0.21736885607242584, 0.41128525137901306, -0.36996692419052124, 0.030864013358950615, -0.36985573172569275, 0.36901229619979858, 
  0.31902232766151428, -0.1328677237033844, 0.049364060163497925, 0.31451165676116943, 0.27427983283996582, -0.092142820358276367, 0.030488496646285057, 0.19964635372161865, 0.21168926358222961, 0.36756467819213867, -0.17897826433181763, 0.28181979060173035, -0.43970426917076111, -0.0089517468586564064, -0.028545290231704712, -0.0067535089328885078, 0.17003077268600464, -0.0641588494181633, 0.15623247623443604, -0.16783778369426727, 
  -0.18642160296440125, 0.38549983501434326, -0.23938150703907013, -0.41320765018463135, -0.094410941004753113, -0.036771401762962341, -0.13566821813583374, -0.347726970911026, 0.37473344802856445, 0.29436987638473511, 0.28144419193267822, 0.40096795558929443, -0.0034321257844567299, -0.016370708122849464, -0.096387922763824463, -0.15631487965583801, -0.24689924716949463, 0.074185043573379517, -0.17828625440597534, 0.20312778651714325, 
  -0.35474264621734619, 0.27866703271865845, 0.030253827571868896, 0.14218394458293915, 0.39283350110054016, 0.017965430393815041, 0.18751505017280579, -0.4124426543712616, -0.11961274594068527, -0.29987972974777222, 0.13737769424915314, 0.28753519058227539, 0.3245718777179718, 0.39440044760704041, -0.070620715618133545, 0.16461077332496643, -0.33985471725463867, 0.3468320369720459, -0.0054910182952880859, -0.023922190070152283, 
  -0.18008801341056824, 0.13775122165679932, 0.090843796730041504, 0.27381807565689087, -0.3208344578742981, 0.28697720170021057, 0.24625876545906067, -0.23711861670017242, 0.29763492941856384, -0.14006452262401581, -0.14009164273738861, 0.088339418172836304, -0.42141908407211304, -0.1910623162984848, -0.34809771180152893, 0.034872047603130341, 0.4212457537651062, 0.34717121720314026, -0.14276808500289917, 0.34646576642990112, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const ALIGN(16) float tensor_data6[3*10] = { 
  -0.2719077467918396, -0.60320192575454712, -0.6004258394241333, 0.57435250282287598, 0.29801154136657715, 0.0082970885559916496, 0.27957940101623535, 0.23009899258613586, -0.46490582823753357, -0.055711578577756882, 
  0.37305012345314026, -0.059357285499572754, 0.55753886699676514, -0.47713840007781982, 0.31758749485015869, -0.041784703731536865, -0.041437972337007523, 0.23537924885749817, 0.4101424515247345, 0.031574077904224396, 
  -0.65424430370330811, -0.062965273857116699, 0.039999663829803467, 0.30940991640090942, 0.42074644565582275, 0.2322458028793335, -0.2061346024274826, -0.11725553125143051, 0.17866098880767822, -0.26612666249275208, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,3 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 132, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 12, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 80, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 2640, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 800, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 120, },
  { kTfLiteArenaRw, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension7, 80, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 40, },
  { kTfLiteArenaRw, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension9, 12, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 12, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflEvalTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
